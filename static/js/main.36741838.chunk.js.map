{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","index.js"],"names":["DigitButton","_ref","dispatch","digit","react_default","a","createElement","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","Object","objectSpread","currentOperand","includes","concat","previousOperand","evaluate","length","slice","_ref2","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","_operand$split","split","_operand$split2","slicedToArray","integer","decimal","format","App","_useReducer","useReducer","_useReducer2","_useReducer2$","className","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.36741838.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { ACTIONS } from \"./App\"\r\n\r\nexport default function DigitButton({dispatch, digit}) {\r\n    return (\r\n        <button onClick={()=> dispatch({type: ACTIONS.ADD_DIGIT, payload: {digit}})}>\r\n        {digit}\r\n        </button>\r\n    )\r\n}","import React from 'react'\r\nimport { ACTIONS } from \"./App\"\r\n\r\nexport default function OperationButton({dispatch, operation}) {\r\n    return (\r\n        <button onClick={()=> dispatch({type: ACTIONS.CHOOSE_OPERATION, payload: {operation}})}>\r\n        {operation}\r\n        </button>\r\n    )\r\n}","import React, { useReducer } from 'react'\nimport DigitButton from './DigitButton'\nimport OperationButton from './OperationButton'\nimport './styles.css'\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\nfunction reducer (state, { type, payload }) {\n  switch(type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false\n        }\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state\n      }\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state\n      }\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      }\n    case ACTIONS.CHOOSE_OPERATION:\n      if(state.currentOperand == null && state.previousOperand == null) {\n        return state\n      }\n      if(state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation\n        }\n      }\n      if(state.previousOperand == null ) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null\n        }\n      }\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null\n      }\n    case ACTIONS.CLEAR:\n      return {}\n    case ACTIONS.DELETE_DIGIT:\n      if(state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        }\n      }\n      if(state.currentOperand == null) return state\n      if(state.currentOperand.length === 1) {\n        return {\n          ...state,\n          currentOperand: null\n        }\n      }\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n      }\n    case ACTIONS.EVALUATE:\n      if(state.operation == null || state.currentOperand == null || state.previousOperand == null) {\n        return state\n      }\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state)\n      }\n    }\n      \n  }\n    \nfunction evaluate({currentOperand, previousOperand, operation}) {\n  const prev = parseFloat(previousOperand)\n  const current = parseFloat(currentOperand)\n  if (isNaN(prev) || isNaN(current)) return \"\"\n  let computation = \"\"\n  switch (operation) {\n    case \"+\":\n      computation = prev + current\n      break\n    case \"-\":\n      computation = prev - current\n      break\n    case \"/\":\n      computation = prev / current\n      break\n    case \"*\":\n      computation = prev * current\n      break\n  }\n  return computation.toString()\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {maximumFractionDigits: 0, })\nfunction formatOperand (operand) {\n  if (operand == null) return\n  const [integer, decimal] = operand.split('.')\n  if(decimal == null) return INTEGER_FORMATTER.format(integer)\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(reducer, {})\n  \n  return (\n    <div className='container'>\n      <div className='output'>\n        <div className='previous-operand'>{formatOperand(previousOperand)} {operation}</div>\n        <div className='current-operand'>{formatOperand(currentOperand)}</div>\n      </div>\n      <button className='col-2' onClick={() => dispatch({type: ACTIONS.CLEAR})}>AC</button>\n      <button onClick={() => dispatch({type: ACTIONS.DELETE_DIGIT})}>DEL</button>\n      <OperationButton operation=\"/\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button className='col-2' onClick={() => dispatch({type: ACTIONS.EVALUATE})}>=</button>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}